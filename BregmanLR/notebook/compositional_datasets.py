import numpy as np
import pandas as pd
from skbio.stats.composition import *

# Economic data from Wang et al. (Multiple linear regression for Compositional Data, 2013)

V_Wang = np. array([
       [0.024, 0.568, 0.408],
       [0.023, 0.540, 0.437],
       [0.021, 0.516, 0.463],
       [0.019, 0.493, 0.488],
       [0.018, 0.474, 0.508],
       [0.016, 0.463, 0.521],
       [0.015, 0.461, 0.524],
       [0.014, 0.457, 0.529],
       [0.012, 0.479, 0.509],
       [0.010, 0.482, 0.508],
       [0.010, 0.474, 0.516],
       [0.009, 0.470, 0.521],
       [0.008, 0.446, 0.546],
       [0.008, 0.432, 0.560],
       [0.007, 0.399, 0.594],
       [0.007, 0.420, 0.573]])

U1_Wang = np.array([
       [0.09853, 0.54467, 0.35680],
       [0.12044, 0.52255, 0.35701],
       [0.12708, 0.49105, 0.38187],
       [0.12443, 0.46027, 0.41530],
       [0.11414, 0.46458, 0.42128],
       [0.10772, 0.44310, 0.44918],
       [0.11004, 0.39875, 0.49121],
       [0.10154, 0.39671, 0.50175],
       [0.08626, 0.40765, 0.50609],
       [0.06878, 0.45352, 0.47770],
       [0.06296, 0.42429, 0.51275],
       [0.05504, 0.41676, 0.52820],
       [0.05243, 0.41251, 0.53505],
       [0.04688, 0.40272, 0.55040],
       [0.05119, 0.37391, 0.57490],
       [0.03930, 0.37573, 0.58496]])

U2_Wang = np.array([
       [0.00350, 0.29244, 0.70406],
       [0.00380, 0.30635, 0.68985],
       [0.00192, 0.30276, 0.69531],
       [0.00117, 0.31051, 0.68832],
       [0.00297, 0.30802, 0.68901],
       [0.00308, 0.28961, 0.70732],
       [0.00377, 0.30051, 0.69573],
       [0.00264, 0.30085, 0.69651],
       [0.00192, 0.29305, 0.70503],
       [0.00078, 0.30147, 0.69775],
       [0.00176, 0.25639, 0.74185],
       [0.00420, 0.26713, 0.72867],
       [0.00220, 0.25783, 0.73997],
       [0.00209, 0.24018, 0.75773],
       [0.00235, 0.22705, 0.77060],
       [0.00360, 0.24734, 0.74906]])

Wang_data = (V_Wang, U1_Wang, U2_Wang)

# Dataset 17 from Aitchison (1986) (with V[13] adjusted due to error in book)
V_A17 = np.array([
[0.27,0.28,0.45],
[0.02,0.03,0.95],
[0.12,0.16,0.72],
[0.83,0.02,0.15],
[0.24,0.22,0.54],
[0.16,0.20,0.64],
[0.31,0.08,0.61],
[0.05,0.85,0.10],
[0.06,0.06,0.88],
[0.08,0.31,0.61],
[0.18,0.20,0.62],
[0.17,0.19,0.64],
[0.04,0.17,0.79],
[0.08,0.25,0.67],
[0.11,0.34,0.55]])

U1_A17 = np.array([
[0.70,0.07,0.23],
[0.19,0.16,0.65],
[0.18,0.26,0.54],
[0.02,0.02,0.96],
[0.08,0.16,0.76],
[0.14,0.18,0.68],
[0.16,0.11,0.73],
[0.04,0.06,0.90],
[0.06,0.54,0.40],
[0.12,0.22,0.66],
[0.06,0.02,0.92],
[0.16,0.04,0.80],
[0.27,0.17,0.56],
[0.21,0.51,0.28],
[0.15,0.15,0.70] ])

A17_data = (V_A17, U1_A17)

# GDP vs Employment by Sector for 158 Countries 
# Source: en.wikipedia.org/wiki/List_of_countries_by_GDP_sector_composition

df=pd.read_csv('gdp_wiki.csv', sep=',',header=0, usecols=[1,2,3,4,5,6], dtype=np.float64)

GDPwiki_data = (closure(df.iloc[: , :3].values), closure(df.iloc[: , 3:].values))


# Artificial dataset created be generating random numbers in R^(d-1)
# and applying inverse ilr transform to produce compositional data

np.random.seed(200)
n, d, m = 30, 10, 4
U_vec = [ ilr_inv(np.random.randn(n,d-1)) for k in range(m)]
beta_true = [(-1)**k * 0.5 * m for k in range(1,m+1)]
V = ilr_inv(sum( beta_true[k] * ilr(U_vec[k]) for k in range(m)) + 0.2* np.random.randn(n,d-1) )

artificial_data = (V, U_vec)
